import requests
import logging

# --- Configuration du logging ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def get_cluster_activegates(clusters, verify_ssl=True):
    """
    R√©cup√®re les ActiveGates en mode CLUSTER pour plusieurs clusters Dynatrace.

    Args:
        clusters (list): Liste de dictionnaires contenant :
                         - name : Nom du cluster (str)
                         - url : URL de l'API v2 activeGates (str)
                         - token : Token API Dynatrace (scope activeGates.read requis)
        verify_ssl (bool): V√©rifier les certificats SSL (mettre False si cert self-signed).

    Returns:
        dict: Dictionnaire {nom_cluster: [liste des ActiveGates CLUSTER]}.
    """
    results = {}

    for cluster in clusters:
        name = cluster.get("name")
        url = cluster.get("url")
        token = cluster.get("token")

        headers = {"Authorization": f"Api-Token {token}"}

        try:
            logging.info(f"üì° Requ√™te vers {name} ({url})")
            response = requests.get(url, headers=headers, verify=verify_ssl, timeout=15)
            response.raise_for_status()

            data = response.json()
            cluster_ags = [
                ag for ag in data.get("activeGates", [])
                if ag.get("type") == "CLUSTER"
            ]

            results[name] = cluster_ags
            logging.info(f"‚úÖ {len(cluster_ags)} ActiveGate(s) CLUSTER trouv√©(s) sur {name}")

        except requests.exceptions.Timeout:
            logging.error(f"‚è±Ô∏è Timeout lors de la requ√™te vers {name}")
            results[name] = []
        except requests.exceptions.HTTPError as e:
            logging.error(f"‚ùå Erreur HTTP {e.response.status_code} sur {name}: {e.response.text}")
            results[name] = []
        except requests.exceptions.RequestException as e:
            logging.error(f"üåê Erreur r√©seau vers {name}: {e}")
            results[name] = []
        except Exception as e:
            logging.error(f"‚ö†Ô∏è Erreur inattendue sur {name}: {e}")
            results[name] = []

    return results


# --- Exemple d'utilisation ---
if __name__ == "__main__":
    clusters = [
        {
            "name": "Cluster-Prod",
            "url": "https://ag1.mondomaine.com:9999/e/env1/api/v2/activeGates",
            "token": "<TOKEN1>"
        },
        {
            "name": "Cluster-Preprod",
            "url": "https://ag2.mondomaine.com:9999/e/env2/api/v2/activeGates",
            "token": "<TOKEN2>"
        }
    ]

    ags_par_cluster = get_cluster_activegates(clusters, verify_ssl=False)

    for cluster_name, ags in ags_par_cluster.items():
        print(f"\nCluster {cluster_name} : {len(ags)} ActiveGates CLUSTER")
        for ag in ags:
            print(f" - ID: {ag.get('id')} | Nom: {ag.get('displayName')} | Version: {ag.get('version', 'N/A')}")
