def get_flexible_host_stats_granular(config: dict) -> dict:
    clusters = {}

    for field, options in config.items():
        source = options.get("source", "host")
        group_by_function = options.get("group_by_function", False)

        if source == "host":
            qs = Host.objects.values(
                "dynatrace__cluster__name", "function", field
            )
        else:
            # relation inverse type metrics
            qs = Host.objects.values(
                "dynatrace__cluster__name", "function", f"{source}__{field}"
            )

        qs = qs.annotate(host_count=Count("id"))

        for row in qs:
            cluster = row["dynatrace__cluster__name"]
            value = row.get(field) or row.get(f"{source}__{field}") or "unknown"

            if group_by_function:
                function = row["function"] if row["function"] in ["node", "ag"] else "other"
            else:
                function = "all"

            clusters.setdefault(cluster, {}).setdefault(field, {}).setdefault(function, {})
            clusters[cluster][field][function][str(value)] = row["host_count"]

    return clusters
