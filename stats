
from collections import defaultdict
from typing import Dict
from ..models import Host, Dynatrace
from .dataclasses import FieldStats, ClusterStats, StatsResult

def get_flexible_host_stats_granular(config: Dict[str, dict]) -> StatsResult:
    """
    Retourne le nombre de hosts par valeur et par fonction pour chaque champ, par cluster Dynatrace.
    """
    clusters: StatsResult = defaultdict(lambda: ClusterStats(
        fields={field: FieldStats() for field in config.keys()}
    ))

    # Précharger dynatrace et cluster
    hosts = Host.objects.select_related("dynatrace__cluster")

    for host in hosts:
        dyn = getattr(host, "dynatrace", None)
        if dyn is None:
            continue  # pas de Dynatrace lié

        cluster_name = dyn.cluster.name

        for field, options in config.items():
            value: int = getattr(host, field, 0)
            group_by_function: bool = options.get("group_by_function", False)

            field_stats: FieldStats = clusters[cluster_name].fields[field]
            key = str(value)

            if group_by_function:
                function: str = host.function if host.function in ["node", "ag"] else "other"
                if function not in field_stats.values:
                    field_stats.values[function] = defaultdict(int)
                field_stats.values[function][key] += 1
            else:
                if "all" not in field_stats.values:
                    field_stats.values["all"] = defaultdict(int)
                field_stats.values["all"][key] += 1

    return clusters




from django.shortcuts import render
from .services.stats import get_flexible_host_stats_granular
from .services.dataclasses import asdict
from collections import defaultdict

def stats_view(request):
    config = {
        "cpu": {"group_by_function": True},
        "ram": {"group_by_function": False},
    }

    stats = get_flexible_host_stats_granular(config)

    # Préparer le dict pour le template, calcul des valeurs uniques pour chaque champ
    stats_dict = {}
    for cluster, data in stats.items():
        cluster_dict = {"fields": {}}
        for field, fdata in data.fields.items():
            # récupérer toutes les valeurs uniques pour ce champ
            value_set = set()
            for func_values in fdata.values.values():
                value_set.update(func_values.keys())
            cluster_dict["fields"][field] = {
                "values": fdata.values,
                "all_values": sorted(value_set, key=int)  # tri numérique
            }
        stats_dict[cluster] = cluster_dict

    return render(request, "stats.html", {"stats": stats_dict, "config": config})




<div class="row">
  <!-- Nav vertical -->
  <div class="col-2">
    <div class="nav flex-column nav-pills" id="v-pills-tab" role="tablist">
      {% for cluster in stats.keys %}
      <button class="nav-link {% if forloop.first %}active{% endif %}" 
              id="v-pills-{{ cluster }}-tab" 
              data-bs-toggle="pill" 
              data-bs-target="#v-pills-{{ cluster }}" 
              type="button" 
              role="tab">
        {{ cluster }}
      </button>
      {% endfor %}
    </div>
  </div>

  <!-- Contenu -->
  <div class="col-10">
    <div class="tab-content" id="v-pills-tabContent">
      {% for cluster, data in stats.items %}
      <div class="tab-pane fade {% if forloop.first %}show active{% endif %}" 
           id="v-pills-{{ cluster }}" role="tabpanel">

        {% for field, fdata in data.fields.items %}
        <h5>{{ field|upper }}</h5>
        <table class="table table-striped">
          <thead>
            <tr>
              <th>Valeur</th>
              {% for func in fdata.values.keys %}
                <th>{{ func|upper }}</th>
              {% endfor %}
            </tr>
          </thead>
          <tbody>
            {% for val in fdata.all_values %}
            <tr>
              <td>{{ val }}</td>
              {% for func, func_values in fdata.values.items %}
                <td>{{ func_values.get(val, 0) }}</td>
              {% endfor %}
            </tr>
            {% endfor %}
          </tbody>
        </table>
        {% endfor %}

      </div>
      {% endfor %}
    </div>
  </div>
</div>
